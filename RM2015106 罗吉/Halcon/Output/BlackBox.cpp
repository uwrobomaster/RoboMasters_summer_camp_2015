///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 12.0.1
///////////////////////////////////////////////////////////////////////////////



#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#  if defined(__linux__) && !defined(NO_EXPORT_APP_MAIN)
#    include <X11/Xlib.h>
#  endif
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#  endif
#  include <stdio.h>
#  include <HALCON/HpThread.h>
#  include <CoreFoundation/CFRunLoop.h>
#endif



using namespace HalconCpp;

// Procedure declarations 
// External procedures 
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
void dev_update_off ();
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'on'. 
void dev_update_on ();

// Procedures 
// External procedures 
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
void dev_update_off ()
{

  //This procedure sets different update settings to 'off'.
  //This is useful to get the best performance and reduce overhead.
  //
  // dev_update_pc(...); only in hdevelop
  // dev_update_var(...); only in hdevelop
  // dev_update_window(...); only in hdevelop
  return;
}

// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'on'. 
void dev_update_on ()
{

  //This procedure sets different update settings to 'on'.
  //
  // dev_update_pc(...); only in hdevelop
  // dev_update_var(...); only in hdevelop
  // dev_update_window(...); only in hdevelop
  return;
}

#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Img, ho_R, ho_G, ho_B, ho_Y, ho_U;
  HObject  ho_V, ho_image_yuv, ho_Regions, ho_LowY, ho_RegionOpening;
  HObject  ho_RegionConn, ho_RegionFillUp, ho_SelectedRegions;
  HObject  ho_SelectedObj, ho_Outter, ho_Inner, ho_RegionDifference;
  HObject  ho_ImageReduced, ho_Edges, ho_UnionEdges, ho_SelectedXLD;
  HObject  ho_ClosedXLD, ho_SelectedXLD1, ho_Rectangle, ho_Contours;

  // Local control variables
  HTuple  hv_FirstFlag, hv_PreAngle, hv_Row_pre;
  HTuple  hv_Column_pre, hv_CameraPar, hv_Index, hv_area;
  HTuple  hv_row, hv_colum, hv_BlkArea, hv_Indices, hv_Row;
  HTuple  hv_Column, hv_Phi, hv_Length1, hv_Length2, hv_Pose;
  HTuple  hv_PoseCov, hv_Error, hv_exception;



  //Image Acquisition 01: Code generated by Image Acquisition 01



  hv_FirstFlag = 1;
  hv_PreAngle = (0/180.0)*3.1415926;
  hv_Row_pre = 240;
  hv_Column_pre = 320;
  ReadCamPar("/home/rm12/桌面/新建文件夹 (2)/RM_Camera.cal", &hv_CameraPar);
  {
  HTuple end_val11 = 8000-1;
  HTuple step_val11 = 1;
  for (hv_Index=125; hv_Index.Continue(end_val11, step_val11); hv_Index += step_val11)
  {
    try
    {

      ReadImage(&ho_Img, "/home/rm12/图片/Image5/img_"+(hv_Index.TupleString(".4")));
      Decompose3(ho_Img, &ho_R, &ho_G, &ho_B);
      TransFromRgb(ho_R, ho_G, ho_B, &ho_Y, &ho_U, &ho_V, "yuv");
      Compose3(ho_Y, ho_U, ho_V, &ho_image_yuv);

      Threshold(ho_Y, &ho_Regions, 0, 70);
      Connection(ho_Regions, &ho_LowY);
      OpeningRectangle1(ho_LowY, &ho_RegionOpening, 25, 25);
      Connection(ho_RegionOpening, &ho_RegionConn);
      FillUp(ho_RegionConn, &ho_RegionFillUp);
      SelectShape(ho_RegionFillUp, &ho_SelectedRegions, (HTuple("rectangularity").Append("area")), 
          "and", (HTuple(0.90).Append(10009.4)), (HTuple(1).Append(500000)));

      OpeningRectangle1(ho_SelectedRegions, &ho_RegionOpening, 20, 20);
      AreaCenter(ho_RegionOpening, &hv_area, &hv_row, &hv_colum);
      TupleMax(hv_area, &hv_BlkArea);
      TupleFind(hv_area, hv_BlkArea, &hv_Indices);
      SelectObj(ho_RegionOpening, &ho_SelectedObj, hv_Indices+1);

      DilationCircle(ho_SelectedObj, &ho_Outter, 5);
      ErosionCircle(ho_SelectedObj, &ho_Inner, 10);
      Difference(ho_Outter, ho_Inner, &ho_RegionDifference);
      ReduceDomain(ho_Y, ho_RegionDifference, &ho_ImageReduced);
      EdgesSubPix(ho_ImageReduced, &ho_Edges, "canny", 1, 30, 40);
      UnionAdjacentContoursXld(ho_Edges, &ho_UnionEdges, 10, 1, "attr_keep");
      SelectShapeXld(ho_UnionEdges, &ho_SelectedXLD, "contlength", "and", 401.3, 
          1000000);
      CloseContoursXld(ho_SelectedXLD, &ho_ClosedXLD);
      SelectShapeXld(ho_ClosedXLD, &ho_SelectedXLD1, "area", "and", 10102.4, 500000);
      SmallestRectangle2Xld(ho_SelectedXLD1, &hv_Row, &hv_Column, &hv_Phi, &hv_Length1, 
          &hv_Length2);
      GenRectangle2(&ho_Rectangle, hv_Row, hv_Column, hv_Phi, hv_Length1, hv_Length2);
      GenContourRegionXld(ho_Rectangle, &ho_Contours, "border");
      //gen_rectangle2_contour_xld (Rectangle_XLD, Row, Column, Phi, Length1, Length2)
      //gen_region_polygon_xld (Rectangle_XLD, Rectangle_Region, 'filled')

      GetRectanglePose(ho_Contours, hv_CameraPar, 0.48, 0.48, "tukey", 2, &hv_Pose, 
          &hv_PoseCov, &hv_Error);

      //disp_circle (600, row, colum, 64)
      dev_update_on();
      if (HDevWindowStack::IsOpen())
        SetColor(HDevWindowStack::GetActive(),"blue");
      if (HDevWindowStack::IsOpen())
        DispObj(ho_Img, HDevWindowStack::GetActive());
      if (HDevWindowStack::IsOpen())
        DispObj(ho_Rectangle, HDevWindowStack::GetActive());


      //stop ()
      //disp_circle (600, row, colum, 10)
      dev_update_off();


    }
    // catch (exception) 
    catch (HalconCpp::HException &HDevExpDefaultException)
    {
      HDevExpDefaultException.ToHTuple(&hv_exception);
      //stop ()
      dev_update_on();
      if (HDevWindowStack::IsOpen())
        SetColor(HDevWindowStack::GetActive(),"red");
      if (HDevWindowStack::IsOpen())
        DispObj(ho_Img, HDevWindowStack::GetActive());

      dev_update_off();
    }

    // stop(); only in hdevelop
    //wait_seconds (0.1)



  }
  }

}


#ifndef NO_EXPORT_APP_MAIN

#ifdef __APPLE__
// On OS X systems, we must have a CFRunLoop running on the main thread in
// order for the HALCON graphics operators to work correctly, and run the
// action function in a separate thread. A CFRunLoopTimer is used to make sure
// the action function is not called before the CFRunLoop is running.
HTuple      gStartMutex;
H_pthread_t gActionThread;

static void timer_callback(CFRunLoopTimerRef timer, void *info)
{
  UnlockMutex(gStartMutex);
}

static Herror apple_action(void **parameters)
{
  LockMutex(gStartMutex);
  action();
  CFRunLoopStop(CFRunLoopGetMain());
  return H_MSG_OK;
}

static int apple_main(int argc, char *argv[])
{
  Herror                error;
  CFRunLoopTimerRef     Timer;
  CFRunLoopTimerContext TimerContext = { 0, 0, 0, 0, 0 };

  CreateMutex("type","sleep",&gStartMutex);
  LockMutex(gStartMutex);

  error = HpThreadHandleAlloc(&gActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleAlloc failed: %d\n", error);
    exit(1);
  }

  error = HpThreadCreate(gActionThread,0,apple_action);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadCreate failed: %d\n", error);
    exit(1);
  }

  Timer = CFRunLoopTimerCreate(kCFAllocatorDefault,
                               CFAbsoluteTimeGetCurrent(),0,0,0,
                               timer_callback,&TimerContext);
  if (!Timer)
  {
    fprintf(stderr,"CFRunLoopTimerCreate failed\n");
    exit(1);
  }
  CFRunLoopAddTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);
  CFRunLoopRun();
  CFRunLoopRemoveTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);
  CFRelease(Timer);

  error = HpThreadHandleFree(gActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleFree failed: %d\n", error);
    exit(1);
  }

  ClearMutex(gStartMutex);
  return 0;
}
#endif

int main(int argc, char *argv[])
{
  // Default settings used in HDevelop (can be omitted) 
  int ret=0;
  SetSystem("width", 512);
  SetSystem("height", 512);

#if defined(_WIN32)
  SetSystem("use_window_thread", "true");
#elif defined(__linux__)
  XInitThreads();
#endif

#ifndef __APPLE__
  action();
#else
  ret = apple_main(argc,argv);
#endif
  return ret;
}

#endif


#endif


